import CuentaCorriente as cc

class Controlador(object):
    def __init__(self):
        self.__listaCuenta = []import Hora as h

class Controlador():
    def __init__(self):
        self.__listaHora = []

    #RESOLVIENDO
    def ingresarHora(self, hora, minuto, segundo):
        objHora = h.Hora(hora,minuto,segundo)
        self.__listaHora.append(objHora)

    def listarHora(self):
        for i in self.__listaHora:
            index = self.__listaHora.index(i)
            self.__listaHora[index].imprimirHora()

    def aumentarSegundoAHora(self):
        for i in self.__listaHora:
            index = self.__listaHora.index(i)
            #AUMENTAMOS SEGUNDOS
            self.__listaHora[index].aumentarSegundo()
            if self.__listaHora[index].getSegundo() == 60:
                self.__listaHora[index].setSegundo(0)
                #AUMENTAMOS MINUTOS
                self.__listaHora[index].aumentarMinuto()
                if self.__listaHora[index].getMinuto() == 60:
                    self.__listaHora[index].setMinuto(0)
                    #AUMENTAMOS HORAS
                    self.__listaHora[index].aumentarHora()
                    if self.__listaHora[index].getHora() == 24:
                        self.__listaHora[index].setHora(0)
            self.__listaHora[index].imprimirHora()

    def tiempoFinalDia(self):
        for i in self.__listaHora:
            index = self.__listaHora.index(i)

            hora = 24 - self.__listaHora[index].getHora()
            minuto = 60 - self.__listaHora[index].getMinuto()
            segundo = 60 - self.__listaHora[index].getSegundo()
            print(f"Tiempo #{index+1}")
            print(f"Tiempo para llegar al final del dia: {hora}:{minuto}:{segundo}")

    def tiempoExistente(self):
        mayorHora = -1
        mayorMinuto = -1
        mayorSegundo = -1
        menorHora = 25
        menorMinuto = 61
        menorSegundo = 61
        auxMaH = 0
        auxMaM = 0
        auxMaS = 0
        auxMeH = 0
        auxMeM = 0
        auxMeS = 0
        for i in self.__listaHora:
            index = self.__listaHora.index(i)
            #HALLAMOS MAYORES
            if self.__listaHora[index].getHora() > mayorHora:
                mayorHora = self.__listaHora[index].getHora()
                auxMaH = self.__listaHora.index(i)
            if self.__listaHora[index].getMinuto() > mayorMinuto:
                mayorMinuto = self.__listaHora[index].getMinuto()
                auxMaM = self.__listaHora.index(i)
            if self.__listaHora[index].getSegundo() > mayorSegundo:
                mayorSegundo = self.__listaHora[index].getSegundo()
                auxMaS = self.__listaHora.index(i)
            #HALLAMOS MENORES
            if self.__listaHora[index].getHora() < menorHora:
                menorHora = self.__listaHora[index].getHora()
                auxMeH = self.__listaHora.index(i)
            if self.__listaHora[index].getMinuto() < menorMinuto:
                menorMinuto = self.__listaHora[index].getMinuto()
                auxMeM = self.__listaHora.index(i)
            if self.__listaHora[index].getSegundo() > menorSegundo:
                menorSegundo = self.__listaHora[index].getSegundo()
                auxMeS = self.__listaHora.index(i)
        diferenciaHora = self.__listaHora[auxMaH].getHora() - self.__listaHora[auxMeH].getHora()
        diferenciaMinuto = self.__listaHora[auxMaM].getMinuto() - self.__listaHora[auxMeM].getMinuto()
        diferenciaSegundo = self.__listaHora[auxMaS].getSegundo() - self.__listaHora[auxMeS].getSegundo()
        print(f"La diferencia que existe es: {diferenciaHora}:{diferenciaMinuto}:{diferenciaSegundo}")


    #METODOS SOLUCION
    def agregarCuenta(self, dni, nombre, apellido, distrito, telefono, saldo):
        objCuenta = cc.CuentaCorriente(dni,nombre,apellido,distrito,telefono,saldo)
        self.__listaCuenta.append(objCuenta)

    def listarCuenta(self):
        for i in self.__listaCuenta:
            #VARIABLE index ALMACENA EL INDICE DEL VALOR I
            index = self.__listaCuenta.index(i)
            self.__listaCuenta[index].consultarCuenta()

    #METODO PARA REALIZAR O SIMULAR TRANSFERENCIA
    def transferencia(self, dniRetira, dniDeposita, monto):
        #BUSCAR A LA PERSONA QUE RETIRA DINERO
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDni() == dniRetira:
                self.__listaCuenta[index].retirarDinero(monto)
        #BUSCAR A LA PERSONA A QUIEN DEPOSITA
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDni() == dniDeposita:
                self.__listaCuenta[index].ingresarDinero(monto)

    #METODO HALLAR EL SALDO PROMEDIO POR DISTRITO
    def saldoPromedioxDistrito(self, distrito):
        cont = 0
        contSaldo = 0
        promedio = 0.0
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDistrito() == distrito:
                cont += 1
                contSaldo += self.__listaCuenta[index].getSaldo()
                promedio = contSaldo / cont

        print(f"El saldo promedio de las personas que viven en {distrito} es: {promedio}")


    #METODO PARA HALLAR APELLIDO CON LA INICIAL
    def apellidoxInicial(self, inicial):
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getApellido()[0] == inicial:
                self.__listaCuenta[index].consultarCuenta()

    #METODO PARA HALLAR MAYOR SALDO
    def mayorSaldo(self):
        mayor = 0
        auxIndex = 0
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getSaldo() > mayor:
                mayor = self.__listaCuenta[index].getSaldo()
                auxIndex = index

        self.__listaCuenta[auxIndex].consultarCuenta()