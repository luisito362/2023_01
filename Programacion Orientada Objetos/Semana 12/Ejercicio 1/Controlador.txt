import CuentaCorriente as cc

class Controlador(object):
    def __init__(self):
        self.__listaCuenta = []

    #METODOS SOLUCION
    def agregarCuenta(self, dni, nombre, apellido, distrito, telefono, saldo):
        objCuenta = cc.CuentaCorriente(dni,nombre,apellido,distrito,telefono,saldo)
        self.__listaCuenta.append(objCuenta)

    def listarCuenta(self):
        for i in self.__listaCuenta:
            #VARIABLE index ALMACENA EL INDICE DEL VALOR I
            index = self.__listaCuenta.index(i)
            self.__listaCuenta[index].consultarCuenta()

    #METODO PARA REALIZAR O SIMULAR TRANSFERENCIA
    def transferencia(self, dniRetira, dniDeposita, monto):
        #BUSCAR A LA PERSONA QUE RETIRA DINERO
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDni() == dniRetira:
                self.__listaCuenta[index].retirarDinero(monto)
        #BUSCAR A LA PERSONA A QUIEN DEPOSITA
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDni() == dniDeposita:
                self.__listaCuenta[index].ingresarDinero(monto)

    #METODO HALLAR EL SALDO PROMEDIO POR DISTRITO
    def saldoPromedioxDistrito(self, distrito):
        cont = 0
        contSaldo = 0
        promedio = 0.0
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getDistrito() == distrito:
                cont += 1
                contSaldo += self.__listaCuenta[index].getSaldo()
                promedio = contSaldo / cont

        print(f"El saldo promedio de las personas que viven en {distrito} es: {promedio}")


    #METODO PARA HALLAR APELLIDO CON LA INICIAL
    def apellidoxInicial(self, inicial):
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getApellido()[0] == inicial:
                self.__listaCuenta[index].consultarCuenta()

    #METODO PARA HALLAR MAYOR SALDO
    def mayorSaldo(self):
        mayor = 0
        auxIndex = 0
        for i in self.__listaCuenta:
            index = index = self.__listaCuenta.index(i)
            if self.__listaCuenta[index].getSaldo() > mayor:
                mayor = self.__listaCuenta[index].getSaldo()
                auxIndex = index

        self.__listaCuenta[auxIndex].consultarCuenta()